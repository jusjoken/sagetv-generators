apply plugin: "java"
apply plugin: "eclipse"
apply plugin: "idea"

// Globals
ext {
}

repositories {
    mavenCentral()
    jcenter()
}

targetCompatibility = 1.8
sourceCompatibility = 1.8

compileJava {
	options.warnings = false
	//options.incremental = true
	//options.debugOptions.debugLevel = "source,lines,vars"
}

sourceSets {
}

dependencies {
	testCompile 'org.testng:testng:6.1.1'
	testCompile "org.mockito:mockito-core:1.9.5"

	// NOTE: none of these dependencies are required are runtime, these are only used by the
	// tools in generating code.

	//
	compile "com.github.javaparser:javaparser-core:3.1.0"

	// https://mvnrepository.com/artifact/org.jdom/jdom2
	compile group: 'org.jdom', name: 'jdom2', version: '2.0.6'

	// https://mvnrepository.com/artifact/com.google.code.gson/gson
	compile group: 'com.google.code.gson', name: 'gson', version: '2.8.0'

    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.5'

	// https://mvnrepository.com/artifact/org.freemarker/freemarker
	compile group: 'org.freemarker', name: 'freemarker', version: '2.3.23'
}

test {
	useTestNG()
}

File getRootDir() {
	return project.rootDir;
}

File getRootBuildOutput() {
	def file = new File(getRootDir(), 'build')
	return file.getAbsoluteFile()
}

File getGenOutput() {
	return new File(getRootBuildOutput(), "generated").getAbsoluteFile();
}

File getTempDocsAPIDir() {
	return new File(getRootBuildOutput(),'tempdocs/sage/api/').getAbsoluteFile();
}

File getAPIJson() {
	return new File(getGenOutput(), "resources/sage/api/api.json").getAbsoluteFile();
}

File getSageSources() {
	File s = new File(getRootDir(), "../sagetv/")
	if (s.exists()) return s;
	if (System.getProperty("sagetv.dir") == null) {
		throw new Exception("need to pass -Dsagetv.dir for access to sagetv sources")
	}
	return new File(System.getProperty("sagetv.dir"))
}

/**
 java -cp ../java/ tv.sage.util.StudioAPIProcessor ../java/sage/api/ ${DOCS_OUT}
 */
task genStudioAPI(type:JavaExec) {
	description 'Generate Studio API temporary source files'
	main = "tv.sage.tools.api.StudioAPIProcessor"
	classpath = sourceSets.main.runtimeClasspath
	args new File(getSageSources(),'java/sage/api').getAbsolutePath(), getTempDocsAPIDir().getAbsolutePath()
}

/**
 java APIASTGenerator tmpdocs api.json
 */
task(genAPIAST, dependsOn: genStudioAPI, type:JavaExec) {
	description 'Generate SageTV API Abstract Syntax Tree'
	main = "tv.sage.tools.api.APIASTGenerator"
	classpath = sourceSets.main.runtimeClasspath
	args getTempDocsAPIDir(), getAPIJson()
}

/**
 java JSONSerializationGenerator api.json java_out_dir
 */
task(genJsonSerializers, dependsOn: genAPIAST, type:JavaExec) {
	description 'Generate Json Serializers for the SageTV Objects'
	main = "tv.sage.tools.api.JSONSerializationGenerator"
	classpath = sourceSets.main.runtimeClasspath
	args getAPIJson(), new File((File)getGenOutput(), 'java/')
}

/**
 java JS RequireJS API Generator api.json java_out_dir
 */
task(genRequireJSAPI, dependsOn: genAPIAST, type:JavaExec) {
	description 'Generate RequireJS API for the SageTV Objects'
	main = "tv.sage.tools.api.JSAPIRequireJSGenerator"
	classpath = sourceSets.main.runtimeClasspath
	args getAPIJson(), new File((File)getGenOutput(), 'js')
}

/**
 java JS ES6 API Generator api.json java_out_dir
 */
task(genES6API, dependsOn: genAPIAST, type:JavaExec) {
	description 'Generate JS ES6 API for the SageTV Objects'
	main = "tv.sage.tools.api.JSAPIES6Generator"
	classpath = sourceSets.main.runtimeClasspath
	args getAPIJson(), new File((File)getGenOutput(), 'es6')
}

/**
 java SwaggerUIGenerator api.json swagger_out.json
 */
task(genSwaggerUI, dependsOn: genAPIAST, type:JavaExec) {
	description 'Generate Json Swagger UI REST documentation'
	main = "tv.sage.tools.api.SwaggerUIGenerator"
	classpath = sourceSets.main.runtimeClasspath
	args getAPIJson(), new File((File)getGenOutput(), 'openapi/sagetv-api.json')
}

task (all, dependsOn: ['genES6API', 'genRequireJSAPI']) {
}

task(syncAll) {
	doLast {
		println "Updating js-api"
		copy {
			from ("build/generated/es6/")
			into ("../sagetv-js-api/api/")
			eachFile {println it.file}
		}
		println ""

		println "Updating sagex swagger definition"
		copy {
			from ("build/generated/openapi/")
			into ("../sagetv-sagex-api/src/main/jetty/static/apidocs/")
			eachFile {println it.file}
		}
		println ""
	}
}

task(syncDev) {
	doLast {
		println "Updating local dev sagetv frontend"
		copy {
			from ("build/generated/es6/")
			into ("../sagetv-frontend/sagetv-ui/node_modules/sagetv-js-api/api/")
			eachFile {println it.file}
		}
		println ""

		println "Updating local dev sagex swagger definition"
		copy {
			from ("build/generated/openapi/")
			into ("../../unRAID/mnt/user/apps/sagetv/server/jetty/static/apidocs/")
			eachFile {println it.file}
		}
		println ""
	}
}


all.finalizedBy(genSwaggerUI)

defaultTasks 'all'